name: Autograding Tests – Execution Flow
on:  
  workflow_dispatch:
  repository_dispatch:

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  # ─────────────────────────────────────────────────────────────
  # 1) Validación estática del workflow
  # ─────────────────────────────────────────────────────────────
  static-wf-check:
    if: github.actor != 'github-classroom[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check if execution-flow.yml exists
        run: |
          test -f .github/workflows/execution-flow.yml \
            || { echo "❌ Falta .github/workflows/execution-flow.yml" ; exit 1 ; }
          echo "✅ El workflow existe."

      - name: Check workflow triggers & input
        run: |
          wf='.github/workflows/execution-flow.yml'
          grep -q "workflow_dispatch"    "$wf" || { echo "❌ Falta trigger workflow_dispatch" ; exit 1 ; }
          grep -q "pass-unit-tests"      "$wf" || { echo "❌ Falta input pass-unit-tests" ; exit 1 ; }
          grep -q "type: boolean"        "$wf" || { echo "❌ El input no es booleano" ; exit 1 ; }
          grep -q "default: false"       "$wf" || { echo "❌ El valor por defecto del input debe ser false" ; exit 1 ; }
          echo "✅ Triggers e input correctos."

      - name: Check jobs are defined
        run: |
          wf='.github/workflows/execution-flow.yml'
          for job in lint-build unit-tests deploy-nonprod e2e-tests load-tests deploy-prod ; do
            grep -q "$job:" "$wf" || { echo "❌ Falta el job $job" ; exit 1 ; }
          done
          echo "✅ Todos los jobs existen."

      - name: Check key steps exist
        run: |
          wf='.github/workflows/execution-flow.yml'
          for step in \
             "Lint and build" \
             "Running unit tests" \
             "Failing tests" \
             "Deploying to nonprod" \
             "Running E2E tests" \
             "Running load tests" \
             "Deploying to prod"
          do
            grep -q "$step" "$wf" || { echo "❌ Falta el step \"$step\"" ; exit 1 ; }
          done
          echo "✅ Todos los steps requeridos existen."

      - name: Ensure continue-on-error not present
        run: |
          if grep -q "continue-on-error:" .github/workflows/execution-flow.yml ; then
            echo "❌ No debe existir 'continue-on-error' en la versión final."
            exit 1
          fi
          echo "✅ Sin continue-on-error (versión final)."

  # ─────────────────────────────────────────────────────────────
  # 2) Hay al menos una ejecución MANUAL con éxito
  # ─────────────────────────────────────────────────────────────
  manual-success-check:
    if: github.actor != 'github-classroom[bot]'
    outputs:
      executed: ${{ steps.getwf.outputs.executed }}
    runs-on: ubuntu-latest
    steps:
      - id: getwf
        uses: actions/github-script@v6
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              workflow_id: 'execution-flow.yml',
              per_page: 1,
              status: 'success',
              event:  'workflow_dispatch'
            });
            const ok = runs.data.total_count > 0;
            core.setOutput('executed', ok);
            console.log('Success run found? =>', ok);
          result-encoding: string

  # ─────────────────────────────────────────────────────────────
  # 3) Hay al menos una ejecución MANUAL que haya fallado
  #    (unit-tests con pass-unit-tests: false)
  # ─────────────────────────────────────────────────────────────
  manual-failure-check:
    if: github.actor != 'github-classroom[bot]'
    outputs:
      executed: ${{ steps.getwf.outputs.executed }}
    runs-on: ubuntu-latest
    steps:
      - id: getwf
        uses: actions/github-script@v6
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              workflow_id: 'execution-flow.yml',
              per_page: 1,
              status: 'failure',
              event:  'workflow_dispatch'
            });
            const ko = runs.data.total_count > 0;
            core.setOutput('executed', ko);
            console.log('Failure run found? =>', ko);
          result-encoding: string

  # ─────────────────────────────────────────────────────────────
  # 4) Reporte de calificaciones
  # ─────────────────────────────────────────────────────────────
  autograding-reporter:
    needs: [static-wf-check, manual-success-check, manual-failure-check]
    if: ${{ always() && github.actor != 'github-classroom[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Static workflow validations
        uses: classroom-resources/autograding-io-grader@v1
        id: t1
        with:
          test-name: 'Workflow definido correctamente'
          command: 'echo ${{needs.static-wf-check.result}}'
          input: ''
          expected-output: 'success'
          comparison-method: 'exact'
          max-score: 40

      - name: Manual run SUCCESS exists
        uses: classroom-resources/autograding-io-grader@v1
        id: t2
        with:
          test-name: 'Ejecución manual exitosa'
          command: 'echo ${{needs.manual-success-check.outputs.executed}}'
          input: ''
          expected-output: 'true'
          comparison-method: 'exact'
          max-score: 30

      - name: Manual run FAILURE exists
        uses: classroom-resources/autograding-io-grader@v1
        id: t3
        with:
          test-name: 'Ejecución manual fallida'
          command: 'echo ${{needs.manual-failure-check.outputs.executed}}'
          input: ''
          expected-output: 'true'
          comparison-method: 'exact'
          max-score: 30

      - name: Autograding summary
        uses: classroom-resources/autograding-grading-reporter@v1
        with:
          runners: t1,t2,t3
        env:
          TEST1_RESULTS: "${{ steps.t1.outputs.result }}"
          TEST2_RESULTS: "${{ steps.t2.outputs.result }}"
          TEST3_RESULTS: "${{ steps.t3.outputs.result }}"
